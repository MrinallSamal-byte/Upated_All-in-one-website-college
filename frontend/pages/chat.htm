<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat Application</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="../public/css/custom.css">
  <link rel="stylesheet" href="../public/css/dashboard.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
        <div class="d-flex align-items-center mb-4 border-bottom pb-2">
          <i class="fas fa-comments fa-2x me-3 text-primary"></i>
          <h2 class="mb-0">Your Chats</h2>
        </div>
        <div id="chats-list" class="row">
          <!-- Chats will be loaded here -->
        </div>
        <div class="card shadow-sm mt-4">
          <div class="card-header bg-primary text-white">
            <h3 class="mb-0">Start New Chat</h3>
          </div>
          <div class="card-body">
            <div class="mb-3">
              <input type="text" id="new-chat-name" class="form-control" placeholder="Chat Name (optional for 1-on-1)">
            </div>
            <div class="form-check mb-3">
              <input type="checkbox" class="form-check-input" id="is-group-chat">
              <label class="form-check-label" for="is-group-chat">Group Chat</label>
            </div>
            <button id="create-chat-btn" class="btn btn-primary">Create Chat</button>
          </div>
        </div>
  <script type="module">
          </script>
  <script>
    document.addEventListener('DOMContentLoaded', async () => {
      const userId = localStorage.getItem('userId') || 1; // Placeholder: Replace with actual user ID
      const userType = localStorage.getItem('userType') || 'student'; // Placeholder: Replace with actual user type
      const fetchChats = async () => {
        try {
          const response = await Promise.race([fetch(`/api/chat/chat/chats/${userId}/${userType}`, { signal: AbortSignal.timeout(10000) }), new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout")), 10000))]);
          const chats = await response.json();
          const chatsList = document.getElementById('chats-list');
          chatsList.innerHTML = ''; // Clear previous chats
          if (chats.length === 0) {
            chatsList.innerHTML = '<p>No chats available. Start a new one!</p>';
            return;
          }
          chats.forEach(chat => {
            const chatCard = document.createElement('div');
            chatCard.className = 'chat-card'; // Using new chat-card style
            chatCard.innerHTML = `\n              <h4>${chat.name || 'Direct Chat'} ${chat.is_group ? '(Group)' : ''}</h4>\n            `;
            chatCard.onclick = () => {
              window.location.href = `messages.htm?chatId=${chat.id}&chatName=${encodeURIComponent(chat.name || 'Direct Chat')}`;
            };
            chatsList.appendChild(chatCard);
          });
        } catch (error) {
          console.error('Error fetching chats:', error);
          document.getElementById('chats-list').innerHTML = '<p>Error loading chats. Please try again later.</p>';
        }
      };
      document.getElementById('create-chat-btn').addEventListener('click', async () => {
        const name = document.getElementById('new-chat-name').value;
        const isGroup = document.getElementById('is-group-chat').checked;
        const participants = [{ userId, userType }]; // Add current user as participant
        try {
          const response = await Promise.race([fetch('/api/chat/chats', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name, isGroup, participants }, { signal: AbortSignal.timeout(10000) }), new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout")), 10000))]),
          });
          const result = await response.json();
          if (response.ok) {
            alert(result.message);
            document.getElementById('new-chat-name').value = '';
            document.getElementById('is-group-chat').checked = false;
            fetchChats(); // Refresh chats list
          } else {
            alert(`Error: ${result.error}`);
          }
        } catch (error) {
          console.error('Error creating chat:', error);
          alert('Failed to create chat.');
        }
      });
      fetchChats(); // Initial fetch
    });
  </script>
  <script src="../public/js/sidebar-fix.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>