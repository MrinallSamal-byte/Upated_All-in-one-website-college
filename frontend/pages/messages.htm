<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat Messages</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="../public/css/custom.css">
  <link rel="stylesheet" href="../public/css/dashboard.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
  <div class="theme-switcher">
    <i class="fas fa-sun"></i>
  </div>
        <div class="d-flex align-items-center mb-4 border-bottom pb-2">
          <i class="fas fa-comments fa-2x me-3 text-primary"></i>
          <h2 class="mb-0" id="chat-name">Chat Messages</h2>
        </div>
        <div class="card shadow-sm mb-4">
          <div class="card-body">
            <div id="messages-list" class="chat-messages border rounded p-3 mb-3" style="height: 400px; overflow-y: auto;">
              <!-- Messages will be loaded here -->
            </div>
            <div class="input-group">
              <input type="text" id="new-message-content" class="form-control" placeholder="Type your message...">
              <button id="send-message-btn" class="btn btn-primary">Send</button>
            </div>
          </div>
        </div>
  <script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', async () => {
      const urlParams = new URLSearchParams(window.location.search);
      const chatId = urlParams.get('chatId');
      const chatName = urlParams.get('chatName');
      if (chatName) {
        document.getElementById('chat-name').textContent = chatName;
      }
      const userId = localStorage.getItem('userId') || 1; // Placeholder: Replace with actual user ID
      const userType = localStorage.getItem('userType') || 'student'; // Placeholder: Replace with actual user type
      const socket = io('http://localhost:5000'); // Connect to your backend Socket.IO server
      socket.on('connect', () => {
        console.log('Connected to Socket.IO');
        socket.emit('joinChat', chatId); // Join the specific chat room
      });
      socket.on('newMessage', (message) => {
        addMessageToChat(message);
      });
      const fetchMessages = async () => {
        try {
          const response = await Promise.race([fetch(`/api/chat/chat/messages/${chatId}`, { signal: AbortSignal.timeout(10000) }), new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout")), 10000))]);
          const messages = await response.json();
          const messagesList = document.getElementById('messages-list');
          messagesList.innerHTML = ''; // Clear previous messages
          if (messages.length === 0) {
            messagesList.innerHTML = '<p>No messages in this chat yet. Start the conversation!</p>';
            return;
          }
          messages.forEach(message => {
            addMessageToChat(message);
          });
          messagesList.scrollTop = messagesList.scrollHeight; // Scroll to bottom
        } catch (error) {
          console.error('Error fetching messages:', error);
          document.getElementById('messages-list').innerHTML = '<p>Error loading messages. Please try again later.</p>';
        }
      };
      const addMessageToChat = (message) => {
        const messagesList = document.getElementById('messages-list');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${message.sender_id == userId && message.sender_type == userType ? 'sent' : 'received'}`;
        messageDiv.innerHTML = `
          <strong>${message.sender_type} (ID: ${message.sender_id}):</strong> ${message.content}
          <small style="display: block; text-align: right;">${new Date(message.created_at).toLocaleTimeString()}</small>
        `;
        messagesList.appendChild(messageDiv);
        messagesList.scrollTop = messagesList.scrollHeight; // Scroll to bottom
      };
      document.getElementById('send-message-btn').addEventListener('click', async () => {
        const content = document.getElementById('new-message-content').value;
        if (content.trim() === '') {
          alert('Message content cannot be empty.');
          return;
        }
        try {
          const response = await Promise.race([fetch('/api/chat/messages', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ chatId, senderId: userId, senderType: userType, content }, { signal: AbortSignal.timeout(10000) }), new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout")), 10000))]),
          });
          const result = await response.json();
          if (response.ok) {
            document.getElementById('new-message-content').value = '';
            // Message will be added via Socket.IO 'newMessage' event
          } else {
            alert(`Error: ${result.error}`);
          }
        } catch (error) {
          console.error('Error sending message:', error);
          alert('Failed to send message.');
        }
      });
      fetchMessages(); // Initial fetch
    });
  </script>
  <script src="../public/js/sidebar-fix.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>